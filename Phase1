<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Desk Booking System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: bold;
            color: #4c51bf;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .login-section, .main-content {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .login-section {
            text-align: center;
            max-width: 500px;
            margin: 50px auto;
        }

        .login-section h2 {
            color: #4c51bf;
            margin-bottom: 30px;
            font-size: 2rem;
        }

        .login-buttons {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn-primary {
            background: linear-gradient(135deg, #4c51bf, #667eea);
            color: white;
        }

        .btn-admin {
            background: linear-gradient(135deg, #e53e3e, #fc8181);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }

        .home-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-top: 30px;
        }

        .booking-card {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .booking-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.2);
        }

        .booking-card h3 {
            font-size: 1.8rem;
            margin-bottom: 15px;
        }

        .booking-card p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .form-group {
            margin-bottom: 20px;
            text-align: left;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #4a5568;
        }

        .form-group input, .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #4c51bf;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 15px 0;
        }

        .booking-form {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }

        .floor-selection {
            padding: 20px;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            background: #f7fafc;
        }

        .floor-map {
            width: 100%;
            height: 400px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            background: white;
            position: relative;
            overflow: hidden;
            margin-top: 15px;
        }

        .floor-map svg {
            width: 100%;
            height: 100%;
        }

        .desk {
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .desk.available {
            fill: #48bb78;
        }

        .desk.booked {
            fill: #e53e3e;
            cursor: not-allowed;
        }

        .desk.selected {
            fill: #4c51bf;
            stroke: #2d3748;
            stroke-width: 2;
        }

        .hidden {
            display: none;
        }

        .back-btn {
            background: #718096;
            color: white;
            margin-right: 15px;
        }

        .admin-panel {
            margin-top: 30px;
        }

        .admin-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .admin-card {
            background: white;
            padding: 20px;
            border-radius: 12px;
            border-left: 4px solid #4c51bf;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .bookings-list {
            max-height: 400px;
            overflow-y: auto;
            margin-top: 20px;
        }

        .booking-item {
            background: #f7fafc;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            border-left: 4px solid #4c51bf;
        }

        .alert {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            background: #48bb78;
            color: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .logout-btn {
            background: #718096;
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
        }

        @media (max-width: 768px) {
            .booking-form {
                grid-template-columns: 1fr;
            }
            
            .container {
                padding: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Login Section -->
        <div id="login-section" class="login-section">
            <h2>Welcome to Desk Booking System</h2>
            <div class="login-buttons">
                <button class="btn btn-primary" onclick="loginSSO()">Login with SSO</button>
                <button class="btn btn-admin" onclick="adminLogin()">Admin Login</button>
            </div>
        </div>

        <!-- Main Application -->
        <div id="main-app" class="hidden">
            <div class="header">
                <div class="nav">
                    <div class="logo">üè¢ DeskBook Pro</div>
                    <div class="user-info">
                        <span id="user-name">John Doe</span>
                        <span id="user-role">(User)</span>
                        <button class="logout-btn" onclick="logout()">Logout</button>
                    </div>
                </div>
            </div>

            <div class="main-content">
                <!-- Home Page -->
                <div id="home-page">
                    <h1 style="text-align: center; color: #4c51bf; margin-bottom: 30px;">Welcome to Your Workspace</h1>
                    <div class="home-grid">
                        <div class="booking-card" onclick="showDeskBooking()">
                            <h3>üìã Book Desk</h3>
                            <p>Reserve your perfect workspace for the day</p>
                        </div>
                        <div class="booking-card" onclick="showRoomBooking()">
                            <h3>üè¢ Book Room</h3>
                            <p>Schedule meeting rooms for your team</p>
                        </div>
                    </div>

                    <!-- Admin Panel (hidden for regular users) -->
                    <div id="admin-panel" class="admin-panel hidden">
                        <h2 style="color: #4c51bf; margin-bottom: 20px;">Admin Dashboard</h2>
                        <div class="admin-grid">
                            <div class="admin-card">
                                <h3>üìä Total Bookings</h3>
                                <p style="font-size: 2rem; color: #4c51bf; margin-top: 10px;" id="total-bookings">0</p>
                            </div>
                            <div class="admin-card">
                                <h3>üéØ Today's Bookings</h3>
                                <p style="font-size: 2rem; color: #4c51bf; margin-top: 10px;" id="today-bookings">0</p>
                            </div>
                            <div class="admin-card">
                                <h3>üí∫ Available Desks</h3>
                                <p style="font-size: 2rem; color: #4c51bf; margin-top: 10px;" id="available-desks">85</p>
                            </div>
                        </div>

                        <div style="margin-top: 30px;">
                            <h3>Bulk Booking</h3>
                            <div style="display: flex; gap: 15px; margin-top: 15px; flex-wrap: wrap;">
                                <input type="date" id="bulk-date" style="padding: 10px; border-radius: 6px; border: 1px solid #ddd;">
                                <select id="bulk-floor" style="padding: 10px; border-radius: 6px; border: 1px solid #ddd;">
                                    <option value="1">Floor 1</option>
                                    <option value="2">Floor 2</option>
                                </select>
                                <input type="number" id="bulk-count" placeholder="Number of desks" style="padding: 10px; border-radius: 6px; border: 1px solid #ddd;">
                                <button class="btn btn-primary" onclick="bulkBookDesks()">Bulk Book</button>
                            </div>
                        </div>

                        <div class="bookings-list">
                            <h3>Recent Bookings</h3>
                            <div id="bookings-container">
                                <!-- Bookings will be populated here -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Desk Booking Page -->
                <div id="desk-booking-page" class="hidden">
                    <h2 style="color: #4c51bf; margin-bottom: 30px;">Book Your Desk</h2>
                    
                    <div class="booking-form">
                        <div>
                            <div class="form-group">
                                <label for="booking-date">Select Date:</label>
                                <input type="date" id="booking-date" required>
                            </div>

                            <div class="form-group">
                                <label for="start-time">Start Time:</label>
                                <input type="time" id="start-time" required>
                            </div>

                            <div class="form-group">
                                <label for="duration">Duration (hours):</label>
                                <select id="duration" required>
                                    <option value="1">1 Hour</option>
                                    <option value="2">2 Hours</option>
                                    <option value="4">4 Hours</option>
                                    <option value="8">Full Day</option>
                                </select>
                            </div>

                            <div class="checkbox-group">
                                <input type="checkbox" id="repeat-booking">
                                <label for="repeat-booking">Repeat booking on multiple dates</label>
                            </div>

                            <div class="checkbox-group">
                                <input type="checkbox" id="manual-selection" onchange="toggleManualSelection()">
                                <label for="manual-selection">Manual desk selection</label>
                            </div>

                            <div style="margin-top: 30px;">
                                <button class="btn back-btn" onclick="showHome()">Back</button>
                                <button class="btn btn-primary" onclick="bookDesk()">Book Desk</button>
                            </div>
                        </div>

                        <div id="floor-selection" class="floor-selection hidden">
                            <h3>Select Your Desk</h3>
                            <div class="form-group">
                                <label for="floor-select">Select Floor:</label>
                                <select id="floor-select" onchange="loadFloorMap()">
                                    <option value="">Choose Floor</option>
                                    <option value="1">Floor 1</option>
                                    <option value="2">Floor 2</option>
                                </select>
                            </div>

                            <div id="floor-map" class="floor-map">
                                <svg id="floor-svg" viewBox="0 0 800 600">
                                    <text x="400" y="300" text-anchor="middle" fill="#999" font-size="18">
                                        Select a floor to view the desk layout
                                    </text>
                                </svg>
                            </div>

                            <div id="selected-desk-info" style="margin-top: 15px; padding: 10px; background: #e6fffa; border-radius: 6px; display: none;">
                                <strong>Selected Desk: </strong><span id="selected-desk-id">None</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Room Booking Page -->
                <div id="room-booking-page" class="hidden">
                    <h2 style="color: #4c51bf; margin-bottom: 30px;">Book Meeting Room</h2>
                    <p style="text-align: center; color: #666; font-size: 1.2rem;">Room booking functionality coming soon!</p>
                    <div style="text-align: center; margin-top: 30px;">
                        <button class="btn back-btn" onclick="showHome()">Back to Home</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Application State
        let currentUser = null;
        let isAdmin = false;
        let selectedDesk = null;
        let bookings = JSON.parse(localStorage.getItem('bookings') || '[]');
        let deskStatus = {};

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            updateBookingStats();
            generateSampleBookings();
        });

        // Authentication Functions
        function loginSSO() {
            // Simulate SSO login
            currentUser = {
                name: "John Doe",
                email: "john.doe@company.com",
                id: "user123"
            };
            isAdmin = false;
            showMainApp();
        }

        function adminLogin() {
            // Simulate admin login
            currentUser = {
                name: "Admin User",
                email: "admin@company.com",
                id: "admin123"
            };
            isAdmin = true;
            showMainApp();
        }

        function logout() {
            currentUser = null;
            isAdmin = false;
            selectedDesk = null;
            document.getElementById('login-section').classList.remove('hidden');
            document.getElementById('main-app').classList.add('hidden');
        }

        function showMainApp() {
            document.getElementById('login-section').classList.add('hidden');
            document.getElementById('main-app').classList.remove('hidden');
            
            // Update user info
            document.getElementById('user-name').textContent = currentUser.name;
            document.getElementById('user-role').textContent = isAdmin ? '(Admin)' : '(User)';
            
            // Show/hide admin panel
            if (isAdmin) {
                document.getElementById('admin-panel').classList.remove('hidden');
                updateBookingStats();
                displayBookings();
            } else {
                document.getElementById('admin-panel').classList.add('hidden');
            }
            
            showHome();
        }

        // Navigation Functions
        function showHome() {
            document.getElementById('home-page').classList.remove('hidden');
            document.getElementById('desk-booking-page').classList.add('hidden');
            document.getElementById('room-booking-page').classList.add('hidden');
        }

        function showDeskBooking() {
            document.getElementById('home-page').classList.add('hidden');
            document.getElementById('desk-booking-page').classList.remove('hidden');
            document.getElementById('room-booking-page').classList.add('hidden');
            
            // Set default date to today
            document.getElementById('booking-date').value = new Date().toISOString().split('T')[0];
            document.getElementById('start-time').value = '09:00';
        }

        function showRoomBooking() {
            document.getElementById('home-page').classList.add('hidden');
            document.getElementById('desk-booking-page').classList.add('hidden');
            document.getElementById('room-booking-page').classList.remove('hidden');
        }

        // Desk Selection Functions
        function toggleManualSelection() {
            const checkbox = document.getElementById('manual-selection');
            const floorSelection = document.getElementById('floor-selection');
            
            if (checkbox.checked) {
                floorSelection.classList.remove('hidden');
            } else {
                floorSelection.classList.add('hidden');
                selectedDesk = null;
                document.getElementById('selected-desk-info').style.display = 'none';
            }
        }

        function loadFloorMap() {
            const floorSelect = document.getElementById('floor-select');
            const floorSvg = document.getElementById('floor-svg');
            
            if (!floorSelect.value) {
                floorSvg.innerHTML = '<text x="400" y="300" text-anchor="middle" fill="#999" font-size="18">Select a floor to view the desk layout</text>';
                return;
            }
            
            // Generate desk layout based on the uploaded floor map
            generateFloorLayout(floorSelect.value);
        }

        function generateFloorLayout(floor) {
            const floorSvg = document.getElementById('floor-svg');
            let deskLayout = '';
            
            // Generate desks based on the floor map pattern
            // Red circles (occupied) and green circles (available) from the image
            const deskPositions = generateDeskPositions();
            
            deskPositions.forEach((pos, index) => {
                const deskId = `${floor}-${index + 1}`;
                const isBooked = deskStatus[deskId] || false;
                const status = isBooked ? 'booked' : 'available';
                
                deskLayout += `
                    <circle 
                        cx="${pos.x}" 
                        cy="${pos.y}" 
                        r="8" 
                        class="desk ${status}" 
                        data-desk-id="${deskId}"
                        onclick="selectDesk('${deskId}')"
                        title="Desk ${deskId}"
                    />
                    <text x="${pos.x}" y="${pos.y + 3}" text-anchor="middle" font-size="8" fill="white" pointer-events="none">
                        ${index + 1}
                    </text>
                `;
            });
            
            floorSvg.innerHTML = deskLayout;
        }

        function generateDeskPositions() {
            // Generate positions based on the floor map pattern
            const positions = [];
            
            // Left side desks (green area in original map)
            for (let row = 0; row < 8; row++) {
                for (let col = 0; col < 6; col++) {
                    positions.push({
                        x: 50 + col * 25,
                        y: 50 + row * 35
                    });
                }
            }
            
            // Right side desks (red area in original map)
            for (let row = 0; row < 8; row++) {
                for (let col = 0; col < 8; col++) {
                    positions.push({
                        x: 450 + col * 25,
                        y: 50 + row * 35
                    });
                }
            }
            
            // Bottom area desks
            for (let row = 0; row < 4; row++) {
                for (let col = 0; col < 10; col++) {
                    positions.push({
                        x: 200 + col * 25,
                        y: 400 + row * 30
                    });
                }
            }
            
            return positions;
        }

        function selectDesk(deskId) {
            if (deskStatus[deskId]) {
                showAlert('This desk is already booked!', 'error');
                return;
            }
            
            // Remove previous selection
            const previousSelected = document.querySelector('.desk.selected');
            if (previousSelected) {
                previousSelected.classList.remove('selected');
                previousSelected.classList.add('available');
            }
            
            // Select new desk
            const deskElement = document.querySelector(`[data-desk-id="${deskId}"]`);
            if (deskElement) {
                deskElement.classList.remove('available');
                deskElement.classList.add('selected');
                selectedDesk = deskId;
                
                // Show selected desk info
                document.getElementById('selected-desk-id').textContent = deskId;
                document.getElementById('selected-desk-info').style.display = 'block';
            }
        }

        // Booking Functions
        function bookDesk() {
            const date = document.getElementById('booking-date').value;
            const startTime = document.getElementById('start-time').value;
            const duration = document.getElementById('duration').value;
            const manualSelection = document.getElementById('manual-selection').checked;
            
            if (!date || !startTime || !duration) {
                showAlert('Please fill in all required fields!', 'error');
                return;
            }
            
            if (manualSelection && !selectedDesk) {
                showAlert('Please select a desk from the floor plan!', 'error');
                return;
            }
            
            // Generate desk ID if manual selection is not used
            const deskId = manualSelection ? selectedDesk : generateRandomDeskId();
            
            // Create booking
            const booking = {
                id: Date.now(),
                userId: currentUser.id,
                userName: currentUser.name,
                deskId: deskId,
                date: date,
                startTime: startTime,
                duration: parseInt(duration),
                timestamp: new Date().toISOString()
            };
            
            bookings.push(booking);
            deskStatus[deskId] = true;
            
            // Save to localStorage (in real app, this would be saved to database)
            localStorage.setItem('bookings', JSON.stringify(bookings));
            
            showAlert('Desk has been successfully booked!');
            
            // Reset form
            selectedDesk = null;
            document.getElementById('manual-selection').checked = false;
            toggleManualSelection();
            
            // Update stats if admin
            if (isAdmin) {
                updateBookingStats();
                displayBookings();
            }
        }

        function generateRandomDeskId() {
            const floor = Math.floor(Math.random() * 2) + 1;
            const deskNumber = Math.floor(Math.random() * 50) + 1;
            return `${floor}-${deskNumber}`;
        }

        // Admin Functions
        function bulkBookDesks() {
            const date = document.getElementById('bulk-date').value;
            const floor = document.getElementById('bulk-floor').value;
            const count = parseInt(document.getElementById('bulk-count').value);
            
            if (!date || !floor || !count) {
                showAlert('Please fill in all bulk booking fields!', 'error');
                return;
            }
            
            for (let i = 0; i < count; i++) {
                const deskId = `${floor}-${Math.floor(Math.random() * 50) + 1}`;
                
                if (!deskStatus[deskId]) {
                    const booking = {
                        id: Date.now() + i,
                        userId: 'admin-bulk',
                        userName: 'Admin Bulk Booking',
                        deskId: deskId,
                        date: date,
                        startTime: '09:00',
                        duration: 8,
                        timestamp: new Date().toISOString()
                    };
                    
                    bookings.push(booking);
                    deskStatus[deskId] = true;
                }
            }
            
            localStorage.setItem('bookings', JSON.stringify(bookings));
            showAlert(`Successfully bulk booked ${count} desks!`);
            
            updateBookingStats();
            displayBookings();
        }

        function updateBookingStats() {
            const today = new Date().toISOString().split('T')[0];
            const todayBookings = bookings.filter(b => b.date === today);
            
            document.getElementById('total-bookings').textContent = bookings.length;
            document.getElementById('today-bookings').textContent = todayBookings.length;
            document.getElementById('available-desks').textContent = 150 - Object.keys(deskStatus).length;
        }

        function displayBookings() {
            const container = document.getElementById('bookings-container');
            const recentBookings = bookings.slice(-10).reverse();
            
            container.innerHTML = recentBookings.map(booking => `
                <div class="booking-item">
                    <div><strong>User:</strong> ${booking.userName}</div>
                    <div><strong>Desk:</strong> ${booking.deskId}</div>
                    <div><strong>Date:</strong> ${booking.date}</div>
                    <div><strong>Time:</strong> ${booking.startTime} (${booking.duration}h)</div>
                </div>
            `).join('');
        }

        function generateSampleBookings() {
            if (bookings.length === 0) {
                // Generate some sample bookings for demo
                const sampleBookings = [
                    {
                        id: 1,
                        userId: 'user1',
                        userName: 'Alice Johnson',
                        deskId: '1-15',
                        date: '2025-08-26',
                        startTime: '09:00',
                        duration: 8,
                        timestamp: new Date().toISOString()
                    },
                    {
                        id: 2,
                        userId: 'user2',
                        userName: 'Bob Smith',
                        deskId: '2-23',
                        date: '2025-08-26',
                        startTime: '10:00',
                        duration: 4,
                        timestamp: new Date().toISOString()
                    }
                ];
                
                bookings.push(...sampleBookings);
                sampleBookings.forEach(booking => {
                    deskStatus[booking.deskId] = true;
                });
                
                localStorage.setItem('bookings', JSON.stringify(bookings));
            }
        }

        // Utility Functions
        function showAlert(message, type = 'success') {
            const alert = document.createElement('div');
            alert.className = 'alert';
            alert.textContent = message;
            
            if (type === 'error') {
                alert.style.background = '#e53e3e';
            }
            
            document.body.appendChild(alert);
            
            setTimeout(() => {
                alert.remove();
            }, 3000);
        }
    </script>
</body>
</html>
